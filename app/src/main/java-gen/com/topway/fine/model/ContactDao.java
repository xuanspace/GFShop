package com.topway.fine.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.topway.fine.model.Contact;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Contacts".
*/
public class ContactDao extends AbstractDao<Contact, Long> {

    public static final String TABLENAME = "Contacts";

    /**
     * Properties of entity Contact.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, Long.class, "name", false, "NAME");
        public final static Property Sex = new Property(2, Long.class, "sex", false, "SEX");
        public final static Property CompanyId = new Property(3, Long.class, "companyId", false, "COMPANY_ID");
        public final static Property Memo = new Property(4, String.class, "memo", false, "MEMO");
        public final static Property Image = new Property(5, String.class, "image", false, "IMAGE");
        public final static Property Hot = new Property(6, Long.class, "hot", false, "HOT");
    };


    public ContactDao(DaoConfig config) {
        super(config);
    }
    
    public ContactDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Contacts\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" INTEGER DEFAULT(0) ," + // 1: name
                "\"SEX\" INTEGER DEFAULT(0) ," + // 2: sex
                "\"COMPANY_ID\" INTEGER DEFAULT(0) ," + // 3: companyId
                "\"MEMO\" TEXT DEFAULT('') ," + // 4: memo
                "\"IMAGE\" TEXT DEFAULT('') ," + // 5: image
                "\"HOT\" INTEGER DEFAULT(0) );"); // 6: hot
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Contacts\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Contact entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long name = entity.getName();
        if (name != null) {
            stmt.bindLong(2, name);
        }
 
        Long sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(3, sex);
        }
 
        Long companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindLong(4, companyId);
        }
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(5, memo);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(6, image);
        }
 
        Long hot = entity.getHot();
        if (hot != null) {
            stmt.bindLong(7, hot);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Contact readEntity(Cursor cursor, int offset) {
        Contact entity = new Contact( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // sex
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // companyId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // memo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // image
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // hot
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Contact entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setSex(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCompanyId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setMemo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHot(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Contact entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Contact entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
