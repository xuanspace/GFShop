package com.topway.fine.model;

import com.topway.fine.model.DaoSession;
import de.greenrobot.dao.DaoException;
import com.topway.fine.db.DatabaseHelper;

import android.os.Parcel;
import android.os.Parcelable;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "Brands".
 */
public class Brand implements Parcelable {

    private Long id;
    private Long categoryId;
    private Long zoneId;
    private String name;
    private String path;
    private String ename;
    private String pinyin;
    private String abbr;
    private String alpha;
    private String image;
    private Long common;
    private Long hot;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BrandDao myDao;

    private Category category;
    private Long category__resolvedKey;

    private Zone zone;
    private Long zone__resolvedKey;


    public Brand() {
    }

    public Brand(Long id) {
        this.id = id;
    }

    public Brand(Long id, Long categoryId, Long zoneId, String name, String path, String ename, String pinyin, String abbr, String alpha, String image, Long common, Long hot) {
        this.id = id;
        this.categoryId = categoryId;
        this.zoneId = zoneId;
        this.name = name;
        this.path = path;
        this.ename = ename;
        this.pinyin = pinyin;
        this.abbr = abbr;
        this.alpha = alpha;
        this.image = image;
        this.common = common;
        this.hot = hot;
    }

    public void setDefaultValue() {
        if (this.id == null )
           this.id = new Long(0);
        if (this.categoryId == null )
           this.categoryId = new Long(0);
        if (this.zoneId == null )
           this.zoneId = new Long(0);
        if (this.name == null )
           this.name = "";
        if (this.path == null )
           this.path = "";
        if (this.ename == null )
           this.ename = "";
        if (this.pinyin == null )
           this.pinyin = "";
        if (this.abbr == null )
           this.abbr = "";
        if (this.alpha == null )
           this.alpha = "";
        if (this.image == null )
           this.image = "";
        if (this.common == null )
           this.common = new Long(0);
        if (this.hot == null )
           this.hot = new Long(0);
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBrandDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(Long categoryId) {
        this.categoryId = categoryId;
    }

    public Long getZoneId() {
        return zoneId;
    }

    public void setZoneId(Long zoneId) {
        this.zoneId = zoneId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getPath() {
        return path;
    }

    public void setPath(String path) {
        this.path = path;
    }

    public String getEname() {
        return ename;
    }

    public void setEname(String ename) {
        this.ename = ename;
    }

    public String getPinyin() {
        return pinyin;
    }

    public void setPinyin(String pinyin) {
        this.pinyin = pinyin;
    }

    public String getAbbr() {
        return abbr;
    }

    public void setAbbr(String abbr) {
        this.abbr = abbr;
    }

    public String getAlpha() {
        return alpha;
    }

    public void setAlpha(String alpha) {
        this.alpha = alpha;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public Long getCommon() {
        return common;
    }

    public void setCommon(Long common) {
        this.common = common;
    }

    public Long getHot() {
        return hot;
    }

    public void setHot(Long hot) {
        this.hot = hot;
    }

    /** To-one relationship, resolved on first access. */
    public Category getCategory() {
        Long __key = this.categoryId;
        if (category__resolvedKey == null || !category__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                daoSession = DatabaseHelper.instance().getSession();
                //throw new DaoException("Entity is detached from DAO context");
            }
            CategoryDao targetDao = daoSession.getCategoryDao();
            Category categoryNew = targetDao.load(__key);
            synchronized (this) {
                category = categoryNew;
            	category__resolvedKey = __key;
            }
        }
        return category;
    }

    public void setCategory(Category category) {
        synchronized (this) {
            this.category = category;
            categoryId = category == null ? null : category.getId();
            category__resolvedKey = categoryId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Zone getZone() {
        Long __key = this.zoneId;
        if (zone__resolvedKey == null || !zone__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                daoSession = DatabaseHelper.instance().getSession();
                //throw new DaoException("Entity is detached from DAO context");
            }
            ZoneDao targetDao = daoSession.getZoneDao();
            Zone zoneNew = targetDao.load(__key);
            synchronized (this) {
                zone = zoneNew;
            	zone__resolvedKey = __key;
            }
        }
        return zone;
    }

    public void setZone(Zone zone) {
        synchronized (this) {
            this.zone = zone;
            zoneId = zone == null ? null : zone.getId();
            zone__resolvedKey = zoneId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }


    //Parcelable
    protected Brand (Parcel in) {
        id = in.readLong();
        categoryId = in.readLong();
        zoneId = in.readLong();
        name = in.readString();
        path = in.readString();
        ename = in.readString();
        pinyin = in.readString();
        abbr = in.readString();
        alpha = in.readString();
        image = in.readString();
        common = in.readLong();
        hot = in.readLong();
    }

    public static final Creator<Brand> CREATOR = new Creator<Brand>() {
        @Override
        public Brand createFromParcel(Parcel in) {
            return new Brand(in);
        }

        @Override
        public Brand[] newArray(int size) {
            return new Brand[size];
        }
    };

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeLong(id);
        dest.writeLong(categoryId);
        dest.writeLong(zoneId);
        dest.writeString(name);
        dest.writeString(path);
        dest.writeString(ename);
        dest.writeString(pinyin);
        dest.writeString(abbr);
        dest.writeString(alpha);
        dest.writeString(image);
        dest.writeLong(common);
        dest.writeLong(hot);
    }
    //Parcelable END

    //JsonSerializable
    public static Brand fromJson(JSONObject jsonObject) throws JSONException {
        Brand domain = new Brand();

        domain.id = jsonObject.getLong("id");
        domain.categoryId = jsonObject.getLong("CATEGORY_ID");
        domain.zoneId = jsonObject.getLong("ZONE_ID");
        domain.name = jsonObject.getString("NAME");
        domain.path = jsonObject.getString("PATH");
        domain.ename = jsonObject.getString("ENAME");
        domain.pinyin = jsonObject.getString("PINYIN");
        domain.abbr = jsonObject.getString("ABBR");
        domain.alpha = jsonObject.getString("ALPHA");
        domain.image = jsonObject.getString("IMAGE");
        domain.common = jsonObject.getLong("COMMON");
        domain.hot = jsonObject.getLong("HOT");

        return domain;
    }

    public static String toJson(Brand obj) throws JSONException {
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("id",obj.id);
        jsonObject.put("CATEGORY_ID",obj.categoryId);
        jsonObject.put("ZONE_ID",obj.zoneId);
        jsonObject.put("NAME",obj.name);
        jsonObject.put("PATH",obj.path);
        jsonObject.put("ENAME",obj.ename);
        jsonObject.put("PINYIN",obj.pinyin);
        jsonObject.put("ABBR",obj.abbr);
        jsonObject.put("ALPHA",obj.alpha);
        jsonObject.put("IMAGE",obj.image);
        jsonObject.put("COMMON",obj.common);
        jsonObject.put("HOT",obj.hot);
        return jsonObject.toString();
    }
    //JsonSerializable END

}
