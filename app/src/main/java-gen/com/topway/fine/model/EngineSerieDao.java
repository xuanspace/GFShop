package com.topway.fine.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.topway.fine.model.EngineSerie;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EngineSeries".
*/
public class EngineSerieDao extends AbstractDao<EngineSerie, Long> {

    public static final String TABLENAME = "EngineSeries";

    /**
     * Properties of entity EngineSerie.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property EngineId = new Property(1, Long.class, "engineId", false, "ENGINE_ID");
        public final static Property EngineName = new Property(2, String.class, "engineName", false, "ENGINE_NAME");
        public final static Property BrandId = new Property(3, Long.class, "brandId", false, "BRAND_ID");
        public final static Property BrandName = new Property(4, String.class, "brandName", false, "BRAND_NAME");
        public final static Property SerieId = new Property(5, Long.class, "serieId", false, "SERIE_ID");
        public final static Property SerieName = new Property(6, String.class, "serieName", false, "SERIE_NAME");
        public final static Property Memo = new Property(7, String.class, "memo", false, "MEMO");
        public final static Property Hot = new Property(8, Long.class, "hot", false, "HOT");
    };


    public EngineSerieDao(DaoConfig config) {
        super(config);
    }
    
    public EngineSerieDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EngineSeries\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ENGINE_ID\" INTEGER DEFAULT(0) ," + // 1: engineId
                "\"ENGINE_NAME\" TEXT DEFAULT('') ," + // 2: engineName
                "\"BRAND_ID\" INTEGER DEFAULT(0) ," + // 3: brandId
                "\"BRAND_NAME\" TEXT DEFAULT('') ," + // 4: brandName
                "\"SERIE_ID\" INTEGER DEFAULT(0) ," + // 5: serieId
                "\"SERIE_NAME\" TEXT DEFAULT('') ," + // 6: serieName
                "\"MEMO\" TEXT DEFAULT('') ," + // 7: memo
                "\"HOT\" INTEGER DEFAULT(0) );"); // 8: hot
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EngineSeries\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EngineSerie entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long engineId = entity.getEngineId();
        if (engineId != null) {
            stmt.bindLong(2, engineId);
        }
 
        String engineName = entity.getEngineName();
        if (engineName != null) {
            stmt.bindString(3, engineName);
        }
 
        Long brandId = entity.getBrandId();
        if (brandId != null) {
            stmt.bindLong(4, brandId);
        }
 
        String brandName = entity.getBrandName();
        if (brandName != null) {
            stmt.bindString(5, brandName);
        }
 
        Long serieId = entity.getSerieId();
        if (serieId != null) {
            stmt.bindLong(6, serieId);
        }
 
        String serieName = entity.getSerieName();
        if (serieName != null) {
            stmt.bindString(7, serieName);
        }
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(8, memo);
        }
 
        Long hot = entity.getHot();
        if (hot != null) {
            stmt.bindLong(9, hot);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public EngineSerie readEntity(Cursor cursor, int offset) {
        EngineSerie entity = new EngineSerie( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // engineId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // engineName
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // brandId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // brandName
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // serieId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // serieName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // memo
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // hot
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EngineSerie entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEngineId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setEngineName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBrandId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setBrandName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSerieId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setSerieName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMemo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHot(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(EngineSerie entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(EngineSerie entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
