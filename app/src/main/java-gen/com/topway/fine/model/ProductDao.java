package com.topway.fine.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.topway.fine.model.Product;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Products".
*/
public class ProductDao extends AbstractDao<Product, Long> {

    public static final String TABLENAME = "Products";

    /**
     * Properties of entity Product.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property UserId = new Property(3, Long.class, "userId", false, "USER_ID");
        public final static Property PartId = new Property(4, Long.class, "partId", false, "PART_ID");
        public final static Property CategoryId = new Property(5, Long.class, "categoryId", false, "CATEGORY_ID");
        public final static Property BrandId = new Property(6, Long.class, "brandId", false, "BRAND_ID");
        public final static Property SerieId = new Property(7, Long.class, "serieId", false, "SERIE_ID");
        public final static Property EngineId = new Property(8, Long.class, "engineId", false, "ENGINE_ID");
        public final static Property SupplierId = new Property(9, Long.class, "supplierId", false, "SUPPLIER_ID");
        public final static Property Path = new Property(10, String.class, "path", false, "PATH");
        public final static Property Price = new Property(11, Float.class, "price", false, "PRICE");
        public final static Property Quantity = new Property(12, Long.class, "quantity", false, "QUANTITY");
        public final static Property Status = new Property(13, Long.class, "status", false, "STATUS");
        public final static Property Image = new Property(14, String.class, "image", false, "IMAGE");
        public final static Property Code = new Property(15, String.class, "code", false, "CODE");
        public final static Property Number = new Property(16, String.class, "number", false, "NUMBER");
        public final static Property Hot = new Property(17, Long.class, "hot", false, "HOT");
        public final static Property Uptime = new Property(18, Long.class, "uptime", false, "UPTIME");
    };

    private DaoSession daoSession;


    public ProductDao(DaoConfig config) {
        super(config);
    }
    
    public ProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Products\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT DEFAULT('') ," + // 1: name
                "\"DESCRIPTION\" TEXT DEFAULT('') ," + // 2: description
                "\"USER_ID\" INTEGER DEFAULT(0) ," + // 3: userId
                "\"PART_ID\" INTEGER DEFAULT(0) ," + // 4: partId
                "\"CATEGORY_ID\" INTEGER DEFAULT(0) ," + // 5: categoryId
                "\"BRAND_ID\" INTEGER DEFAULT(0) ," + // 6: brandId
                "\"SERIE_ID\" INTEGER DEFAULT(0) ," + // 7: serieId
                "\"ENGINE_ID\" INTEGER DEFAULT(0) ," + // 8: engineId
                "\"SUPPLIER_ID\" INTEGER DEFAULT(0) ," + // 9: supplierId
                "\"PATH\" TEXT DEFAULT('') ," + // 10: path
                "\"PRICE\" REAL," + // 11: price
                "\"QUANTITY\" INTEGER DEFAULT(0) ," + // 12: quantity
                "\"STATUS\" INTEGER DEFAULT(0) ," + // 13: status
                "\"IMAGE\" TEXT DEFAULT('') ," + // 14: image
                "\"CODE\" TEXT DEFAULT('') ," + // 15: code
                "\"NUMBER\" TEXT DEFAULT('') ," + // 16: number
                "\"HOT\" INTEGER DEFAULT(0) ," + // 17: hot
                "\"UPTIME\" INTEGER DEFAULT(0) );"); // 18: uptime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Products\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Product entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(4, userId);
        }
 
        Long partId = entity.getPartId();
        if (partId != null) {
            stmt.bindLong(5, partId);
        }
 
        Long categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindLong(6, categoryId);
        }
 
        Long brandId = entity.getBrandId();
        if (brandId != null) {
            stmt.bindLong(7, brandId);
        }
 
        Long serieId = entity.getSerieId();
        if (serieId != null) {
            stmt.bindLong(8, serieId);
        }
 
        Long engineId = entity.getEngineId();
        if (engineId != null) {
            stmt.bindLong(9, engineId);
        }
 
        Long supplierId = entity.getSupplierId();
        if (supplierId != null) {
            stmt.bindLong(10, supplierId);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(11, path);
        }
 
        Float price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(12, price);
        }
 
        Long quantity = entity.getQuantity();
        if (quantity != null) {
            stmt.bindLong(13, quantity);
        }
 
        Long status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(14, status);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(15, image);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(16, code);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(17, number);
        }
 
        Long hot = entity.getHot();
        if (hot != null) {
            stmt.bindLong(18, hot);
        }
 
        Long uptime = entity.getUptime();
        if (uptime != null) {
            stmt.bindLong(19, uptime);
        }
    }

    @Override
    protected void attachEntity(Product entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Product readEntity(Cursor cursor, int offset) {
        Product entity = new Product( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // userId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // partId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // categoryId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // brandId
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // serieId
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // engineId
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // supplierId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // path
            cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11), // price
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // quantity
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // status
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // image
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // code
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // number
            cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17), // hot
            cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18) // uptime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Product entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setPartId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setCategoryId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setBrandId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setSerieId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setEngineId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setSupplierId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setPath(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPrice(cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11));
        entity.setQuantity(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setStatus(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setImage(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCode(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setNumber(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setHot(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
        entity.setUptime(cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Product entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Product entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPartDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getCategoryDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getBrandDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getSerieDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T4", daoSession.getEngineDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T5", daoSession.getCompanyDao().getAllColumns());
            builder.append(" FROM Products T");
            builder.append(" LEFT JOIN Parts T0 ON T.\"PART_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN Categories T1 ON T.\"CATEGORY_ID\"=T1.\"_id\"");
            builder.append(" LEFT JOIN Brands T2 ON T.\"BRAND_ID\"=T2.\"_id\"");
            builder.append(" LEFT JOIN Series T3 ON T.\"SERIE_ID\"=T3.\"_id\"");
            builder.append(" LEFT JOIN Engines T4 ON T.\"ENGINE_ID\"=T4.\"_id\"");
            builder.append(" LEFT JOIN Companys T5 ON T.\"SUPPLIER_ID\"=T5.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Product loadCurrentDeep(Cursor cursor, boolean lock) {
        Product entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Part part = loadCurrentOther(daoSession.getPartDao(), cursor, offset);
        entity.setPart(part);
        offset += daoSession.getPartDao().getAllColumns().length;

        Category category = loadCurrentOther(daoSession.getCategoryDao(), cursor, offset);
        entity.setCategory(category);
        offset += daoSession.getCategoryDao().getAllColumns().length;

        Brand brand = loadCurrentOther(daoSession.getBrandDao(), cursor, offset);
        entity.setBrand(brand);
        offset += daoSession.getBrandDao().getAllColumns().length;

        Serie serie = loadCurrentOther(daoSession.getSerieDao(), cursor, offset);
        entity.setSerie(serie);
        offset += daoSession.getSerieDao().getAllColumns().length;

        Engine engine = loadCurrentOther(daoSession.getEngineDao(), cursor, offset);
        entity.setEngine(engine);
        offset += daoSession.getEngineDao().getAllColumns().length;

        Company company = loadCurrentOther(daoSession.getCompanyDao(), cursor, offset);
        entity.setCompany(company);

        return entity;    
    }

    public Product loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Product> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Product> list = new ArrayList<Product>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Product> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Product> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
