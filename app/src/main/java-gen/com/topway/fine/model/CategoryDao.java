package com.topway.fine.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.topway.fine.model.Category;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Categories".
*/
public class CategoryDao extends AbstractDao<Category, Long> {

    public static final String TABLENAME = "Categories";

    /**
     * Properties of entity Category.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Pid = new Property(1, Long.class, "pid", false, "PID");
        public final static Property Child = new Property(2, Long.class, "child", false, "CHILD");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Path = new Property(4, String.class, "path", false, "PATH");
        public final static Property Clazz = new Property(5, String.class, "clazz", false, "CLAZZ");
        public final static Property Rid = new Property(6, Long.class, "rid", false, "RID");
        public final static Property Gid = new Property(7, Long.class, "gid", false, "GID");
        public final static Property Image = new Property(8, String.class, "image", false, "IMAGE");
        public final static Property Ename = new Property(9, String.class, "ename", false, "ENAME");
        public final static Property Pinyin = new Property(10, String.class, "pinyin", false, "PINYIN");
        public final static Property Abbr = new Property(11, String.class, "abbr", false, "ABBR");
        public final static Property Alpha = new Property(12, String.class, "alpha", false, "ALPHA");
        public final static Property Hot = new Property(13, Long.class, "hot", false, "HOT");
    };

    private DaoSession daoSession;

    private Query<Category> category_ChildrenQuery;

    public CategoryDao(DaoConfig config) {
        super(config);
    }
    
    public CategoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Categories\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PID\" INTEGER DEFAULT(0) ," + // 1: pid
                "\"CHILD\" INTEGER DEFAULT(0) ," + // 2: child
                "\"NAME\" TEXT DEFAULT('') ," + // 3: name
                "\"PATH\" TEXT DEFAULT('') ," + // 4: path
                "\"CLAZZ\" TEXT DEFAULT('') ," + // 5: clazz
                "\"RID\" INTEGER DEFAULT(0) ," + // 6: rid
                "\"GID\" INTEGER DEFAULT(0) ," + // 7: gid
                "\"IMAGE\" TEXT DEFAULT('') ," + // 8: image
                "\"ENAME\" TEXT DEFAULT('') ," + // 9: ename
                "\"PINYIN\" TEXT DEFAULT('') ," + // 10: pinyin
                "\"ABBR\" TEXT DEFAULT('') ," + // 11: abbr
                "\"ALPHA\" TEXT DEFAULT('') ," + // 12: alpha
                "\"HOT\" INTEGER DEFAULT(0) );"); // 13: hot
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Categories\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Category entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long pid = entity.getPid();
        if (pid != null) {
            stmt.bindLong(2, pid);
        }
 
        Long child = entity.getChild();
        if (child != null) {
            stmt.bindLong(3, child);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(5, path);
        }
 
        String clazz = entity.getClazz();
        if (clazz != null) {
            stmt.bindString(6, clazz);
        }
 
        Long rid = entity.getRid();
        if (rid != null) {
            stmt.bindLong(7, rid);
        }
 
        Long gid = entity.getGid();
        if (gid != null) {
            stmt.bindLong(8, gid);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(9, image);
        }
 
        String ename = entity.getEname();
        if (ename != null) {
            stmt.bindString(10, ename);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(11, pinyin);
        }
 
        String abbr = entity.getAbbr();
        if (abbr != null) {
            stmt.bindString(12, abbr);
        }
 
        String alpha = entity.getAlpha();
        if (alpha != null) {
            stmt.bindString(13, alpha);
        }
 
        Long hot = entity.getHot();
        if (hot != null) {
            stmt.bindLong(14, hot);
        }
    }

    @Override
    protected void attachEntity(Category entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Category readEntity(Cursor cursor, int offset) {
        Category entity = new Category( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // pid
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // child
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // path
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // clazz
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // rid
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // gid
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // image
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ename
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // pinyin
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // abbr
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // alpha
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13) // hot
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Category entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setChild(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setClazz(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRid(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setGid(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setImage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setEname(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPinyin(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAbbr(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAlpha(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setHot(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Category entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Category entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "children" to-many relationship of Category. */
    public List<Category> _queryCategory_Children(Long pid) {
        synchronized (this) {
            if (category_ChildrenQuery == null) {
                QueryBuilder<Category> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Pid.eq(null));
                category_ChildrenQuery = queryBuilder.build();
            }
        }
        Query<Category> query = category_ChildrenQuery.forCurrentThread();
        query.setParameter(0, pid);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCategoryDao().getAllColumns());
            builder.append(" FROM Categories T");
            builder.append(" LEFT JOIN Categories T0 ON T.\"PID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Category loadCurrentDeep(Cursor cursor, boolean lock) {
        Category entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Category parent = loadCurrentOther(daoSession.getCategoryDao(), cursor, offset);
        entity.setParent(parent);

        return entity;    
    }

    public Category loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Category> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Category> list = new ArrayList<Category>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Category> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Category> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
