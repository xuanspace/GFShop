package com.topway.fine.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.topway.fine.model.Dictionary;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Dictionary".
*/
public class DictionaryDao extends AbstractDao<Dictionary, Long> {

    public static final String TABLENAME = "Dictionary";

    /**
     * Properties of entity Dictionary.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Field = new Property(1, String.class, "field", false, "FIELD");
        public final static Property Value = new Property(2, Long.class, "value", false, "VALUE");
        public final static Property Description = new Property(3, Long.class, "description", false, "DESCRIPTION");
    };


    public DictionaryDao(DaoConfig config) {
        super(config);
    }
    
    public DictionaryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Dictionary\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"FIELD\" TEXT DEFAULT('') ," + // 1: field
                "\"VALUE\" INTEGER DEFAULT(0) ," + // 2: value
                "\"DESCRIPTION\" INTEGER DEFAULT(0) );"); // 3: description
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Dictionary\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Dictionary entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String field = entity.getField();
        if (field != null) {
            stmt.bindString(2, field);
        }
 
        Long value = entity.getValue();
        if (value != null) {
            stmt.bindLong(3, value);
        }
 
        Long description = entity.getDescription();
        if (description != null) {
            stmt.bindLong(4, description);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Dictionary readEntity(Cursor cursor, int offset) {
        Dictionary entity = new Dictionary( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // field
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // value
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // description
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Dictionary entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setField(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setValue(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Dictionary entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Dictionary entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
