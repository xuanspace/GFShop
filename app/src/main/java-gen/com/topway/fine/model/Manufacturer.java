package com.topway.fine.model;

import com.topway.fine.model.DaoSession;
import de.greenrobot.dao.DaoException;
import com.topway.fine.db.DatabaseHelper;

import android.os.Parcel;
import android.os.Parcelable;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "Manufacturers".
 */
public class Manufacturer implements Parcelable {

    private Long id;
    private Long categoryId;
    private Long brandId;
    private String name;
    private String path;
    private Long common;
    private Long hot;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ManufacturerDao myDao;

    private Category category;
    private Long category__resolvedKey;

    private Brand brand;
    private Long brand__resolvedKey;


    public Manufacturer() {
    }

    public Manufacturer(Long id) {
        this.id = id;
    }

    public Manufacturer(Long id, Long categoryId, Long brandId, String name, String path, Long common, Long hot) {
        this.id = id;
        this.categoryId = categoryId;
        this.brandId = brandId;
        this.name = name;
        this.path = path;
        this.common = common;
        this.hot = hot;
    }

    public void setDefaultValue() {
        if (this.id == null )
           this.id = new Long(0);
        if (this.categoryId == null )
           this.categoryId = new Long(0);
        if (this.brandId == null )
           this.brandId = new Long(0);
        if (this.name == null )
           this.name = "";
        if (this.path == null )
           this.path = "";
        if (this.common == null )
           this.common = new Long(0);
        if (this.hot == null )
           this.hot = new Long(0);
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getManufacturerDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(Long categoryId) {
        this.categoryId = categoryId;
    }

    public Long getBrandId() {
        return brandId;
    }

    public void setBrandId(Long brandId) {
        this.brandId = brandId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getPath() {
        return path;
    }

    public void setPath(String path) {
        this.path = path;
    }

    public Long getCommon() {
        return common;
    }

    public void setCommon(Long common) {
        this.common = common;
    }

    public Long getHot() {
        return hot;
    }

    public void setHot(Long hot) {
        this.hot = hot;
    }

    /** To-one relationship, resolved on first access. */
    public Category getCategory() {
        Long __key = this.categoryId;
        if (category__resolvedKey == null || !category__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                daoSession = DatabaseHelper.instance().getSession();
                //throw new DaoException("Entity is detached from DAO context");
            }
            CategoryDao targetDao = daoSession.getCategoryDao();
            Category categoryNew = targetDao.load(__key);
            synchronized (this) {
                category = categoryNew;
            	category__resolvedKey = __key;
            }
        }
        return category;
    }

    public void setCategory(Category category) {
        synchronized (this) {
            this.category = category;
            categoryId = category == null ? null : category.getId();
            category__resolvedKey = categoryId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Brand getBrand() {
        Long __key = this.brandId;
        if (brand__resolvedKey == null || !brand__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                daoSession = DatabaseHelper.instance().getSession();
                //throw new DaoException("Entity is detached from DAO context");
            }
            BrandDao targetDao = daoSession.getBrandDao();
            Brand brandNew = targetDao.load(__key);
            synchronized (this) {
                brand = brandNew;
            	brand__resolvedKey = __key;
            }
        }
        return brand;
    }

    public void setBrand(Brand brand) {
        synchronized (this) {
            this.brand = brand;
            brandId = brand == null ? null : brand.getId();
            brand__resolvedKey = brandId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }


    //Parcelable
    protected Manufacturer (Parcel in) {
        id = in.readLong();
        categoryId = in.readLong();
        brandId = in.readLong();
        name = in.readString();
        path = in.readString();
        common = in.readLong();
        hot = in.readLong();
    }

    public static final Creator<Manufacturer> CREATOR = new Creator<Manufacturer>() {
        @Override
        public Manufacturer createFromParcel(Parcel in) {
            return new Manufacturer(in);
        }

        @Override
        public Manufacturer[] newArray(int size) {
            return new Manufacturer[size];
        }
    };

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeLong(id);
        dest.writeLong(categoryId);
        dest.writeLong(brandId);
        dest.writeString(name);
        dest.writeString(path);
        dest.writeLong(common);
        dest.writeLong(hot);
    }
    //Parcelable END

    //JsonSerializable
    public static Manufacturer fromJson(JSONObject jsonObject) throws JSONException {
        Manufacturer domain = new Manufacturer();

        domain.id = jsonObject.getLong("id");
        domain.categoryId = jsonObject.getLong("CATEGORY_ID");
        domain.brandId = jsonObject.getLong("BRAND_ID");
        domain.name = jsonObject.getString("NAME");
        domain.path = jsonObject.getString("PATH");
        domain.common = jsonObject.getLong("COMMON");
        domain.hot = jsonObject.getLong("HOT");

        return domain;
    }

    public static String toJson(Manufacturer obj) throws JSONException {
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("id",obj.id);
        jsonObject.put("CATEGORY_ID",obj.categoryId);
        jsonObject.put("BRAND_ID",obj.brandId);
        jsonObject.put("NAME",obj.name);
        jsonObject.put("PATH",obj.path);
        jsonObject.put("COMMON",obj.common);
        jsonObject.put("HOT",obj.hot);
        return jsonObject.toString();
    }
    //JsonSerializable END

}
