package com.topway.fine.model;

import com.topway.fine.model.DaoSession;
import de.greenrobot.dao.DaoException;
import com.topway.fine.db.DatabaseHelper;

import android.os.Parcel;
import android.os.Parcelable;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "Generics".
 */
public class Generic implements Parcelable {

    private Long id;
    private Long categoryId;
    private Long Id1;
    private Long Id2;
    private Long unit;
    private String memo;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GenericDao myDao;

    private Category category;
    private Long category__resolvedKey;


    public Generic() {
    }

    public Generic(Long id) {
        this.id = id;
    }

    public Generic(Long id, Long categoryId, Long Id1, Long Id2, Long unit, String memo) {
        this.id = id;
        this.categoryId = categoryId;
        this.Id1 = Id1;
        this.Id2 = Id2;
        this.unit = unit;
        this.memo = memo;
    }

    public void setDefaultValue() {
        if (this.id == null )
           this.id = new Long(0);
        if (this.categoryId == null )
           this.categoryId = new Long(0);
        if (this.Id1 == null )
           this.Id1 = new Long(0);
        if (this.Id2 == null )
           this.Id2 = new Long(0);
        if (this.unit == null )
           this.unit = new Long(0);
        if (this.memo == null )
           this.memo = "";
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGenericDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(Long categoryId) {
        this.categoryId = categoryId;
    }

    public Long getId1() {
        return Id1;
    }

    public void setId1(Long Id1) {
        this.Id1 = Id1;
    }

    public Long getId2() {
        return Id2;
    }

    public void setId2(Long Id2) {
        this.Id2 = Id2;
    }

    public Long getUnit() {
        return unit;
    }

    public void setUnit(Long unit) {
        this.unit = unit;
    }

    public String getMemo() {
        return memo;
    }

    public void setMemo(String memo) {
        this.memo = memo;
    }

    /** To-one relationship, resolved on first access. */
    public Category getCategory() {
        Long __key = this.categoryId;
        if (category__resolvedKey == null || !category__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                daoSession = DatabaseHelper.instance().getSession();
                //throw new DaoException("Entity is detached from DAO context");
            }
            CategoryDao targetDao = daoSession.getCategoryDao();
            Category categoryNew = targetDao.load(__key);
            synchronized (this) {
                category = categoryNew;
            	category__resolvedKey = __key;
            }
        }
        return category;
    }

    public void setCategory(Category category) {
        synchronized (this) {
            this.category = category;
            categoryId = category == null ? null : category.getId();
            category__resolvedKey = categoryId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }


    //Parcelable
    protected Generic (Parcel in) {
        id = in.readLong();
        categoryId = in.readLong();
        Id1 = in.readLong();
        Id2 = in.readLong();
        unit = in.readLong();
        memo = in.readString();
    }

    public static final Creator<Generic> CREATOR = new Creator<Generic>() {
        @Override
        public Generic createFromParcel(Parcel in) {
            return new Generic(in);
        }

        @Override
        public Generic[] newArray(int size) {
            return new Generic[size];
        }
    };

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeLong(id);
        dest.writeLong(categoryId);
        dest.writeLong(Id1);
        dest.writeLong(Id2);
        dest.writeLong(unit);
        dest.writeString(memo);
    }
    //Parcelable END

    //JsonSerializable
    public static Generic fromJson(JSONObject jsonObject) throws JSONException {
        Generic domain = new Generic();

        domain.id = jsonObject.getLong("id");
        domain.categoryId = jsonObject.getLong("CATEGORY_ID");
        domain.Id1 = jsonObject.getLong("ID1");
        domain.Id2 = jsonObject.getLong("ID2");
        domain.unit = jsonObject.getLong("UNIT");
        domain.memo = jsonObject.getString("MEMO");

        return domain;
    }

    public static String toJson(Generic obj) throws JSONException {
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("id",obj.id);
        jsonObject.put("CATEGORY_ID",obj.categoryId);
        jsonObject.put("ID1",obj.Id1);
        jsonObject.put("ID2",obj.Id2);
        jsonObject.put("UNIT",obj.unit);
        jsonObject.put("MEMO",obj.memo);
        return jsonObject.toString();
    }
    //JsonSerializable END

}
