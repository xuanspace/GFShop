package com.topway.fine.model;

import java.util.List;
import com.topway.fine.model.DaoSession;
import de.greenrobot.dao.DaoException;
import com.topway.fine.db.DatabaseHelper;

import android.os.Parcel;
import android.os.Parcelable;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "Categories".
 */
public class Category implements Parcelable {

    private Long id;
    private Long pid;
    private Long child;
    private String name;
    private String path;
    private String clazz;
    private Long rid;
    private Long gid;
    private String image;
    private String ename;
    private String pinyin;
    private String abbr;
    private String alpha;
    private Long hot;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CategoryDao myDao;

    private Category parent;
    private Long parent__resolvedKey;

    private List<Category> children;

    public Category() {
    }

    public Category(Long id) {
        this.id = id;
    }

    public Category(Long id, Long pid, Long child, String name, String path, String clazz, Long rid, Long gid, String image, String ename, String pinyin, String abbr, String alpha, Long hot) {
        this.id = id;
        this.pid = pid;
        this.child = child;
        this.name = name;
        this.path = path;
        this.clazz = clazz;
        this.rid = rid;
        this.gid = gid;
        this.image = image;
        this.ename = ename;
        this.pinyin = pinyin;
        this.abbr = abbr;
        this.alpha = alpha;
        this.hot = hot;
    }

    public void setDefaultValue() {
        if (this.id == null )
           this.id = new Long(0);
        if (this.pid == null )
           this.pid = new Long(0);
        if (this.child == null )
           this.child = new Long(0);
        if (this.name == null )
           this.name = "";
        if (this.path == null )
           this.path = "";
        if (this.clazz == null )
           this.clazz = "";
        if (this.rid == null )
           this.rid = new Long(0);
        if (this.gid == null )
           this.gid = new Long(0);
        if (this.image == null )
           this.image = "";
        if (this.ename == null )
           this.ename = "";
        if (this.pinyin == null )
           this.pinyin = "";
        if (this.abbr == null )
           this.abbr = "";
        if (this.alpha == null )
           this.alpha = "";
        if (this.hot == null )
           this.hot = new Long(0);
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCategoryDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getPid() {
        return pid;
    }

    public void setPid(Long pid) {
        this.pid = pid;
    }

    public Long getChild() {
        return child;
    }

    public void setChild(Long child) {
        this.child = child;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getPath() {
        return path;
    }

    public void setPath(String path) {
        this.path = path;
    }

    public String getClazz() {
        return clazz;
    }

    public void setClazz(String clazz) {
        this.clazz = clazz;
    }

    public Long getRid() {
        return rid;
    }

    public void setRid(Long rid) {
        this.rid = rid;
    }

    public Long getGid() {
        return gid;
    }

    public void setGid(Long gid) {
        this.gid = gid;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public String getEname() {
        return ename;
    }

    public void setEname(String ename) {
        this.ename = ename;
    }

    public String getPinyin() {
        return pinyin;
    }

    public void setPinyin(String pinyin) {
        this.pinyin = pinyin;
    }

    public String getAbbr() {
        return abbr;
    }

    public void setAbbr(String abbr) {
        this.abbr = abbr;
    }

    public String getAlpha() {
        return alpha;
    }

    public void setAlpha(String alpha) {
        this.alpha = alpha;
    }

    public Long getHot() {
        return hot;
    }

    public void setHot(Long hot) {
        this.hot = hot;
    }

    /** To-one relationship, resolved on first access. */
    public Category getParent() {
        Long __key = this.pid;
        if (parent__resolvedKey == null || !parent__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                daoSession = DatabaseHelper.instance().getSession();
                //throw new DaoException("Entity is detached from DAO context");
            }
            CategoryDao targetDao = daoSession.getCategoryDao();
            Category parentNew = targetDao.load(__key);
            synchronized (this) {
                parent = parentNew;
            	parent__resolvedKey = __key;
            }
        }
        return parent;
    }

    public void setParent(Category parent) {
        synchronized (this) {
            this.parent = parent;
            pid = parent == null ? null : parent.getId();
            parent__resolvedKey = pid;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Category> getChildren() {
        if (children == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoryDao targetDao = daoSession.getCategoryDao();
            List<Category> childrenNew = targetDao._queryCategory_Children(id);
            synchronized (this) {
                if(children == null) {
                    children = childrenNew;
                }
            }
        }
        return children;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetChildren() {
        children = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }


    //Parcelable
    protected Category (Parcel in) {
        id = in.readLong();
        pid = in.readLong();
        child = in.readLong();
        name = in.readString();
        path = in.readString();
        clazz = in.readString();
        rid = in.readLong();
        gid = in.readLong();
        image = in.readString();
        ename = in.readString();
        pinyin = in.readString();
        abbr = in.readString();
        alpha = in.readString();
        hot = in.readLong();
    }

    public static final Creator<Category> CREATOR = new Creator<Category>() {
        @Override
        public Category createFromParcel(Parcel in) {
            return new Category(in);
        }

        @Override
        public Category[] newArray(int size) {
            return new Category[size];
        }
    };

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeLong(id);
        dest.writeLong(pid);
        dest.writeLong(child);
        dest.writeString(name);
        dest.writeString(path);
        dest.writeString(clazz);
        dest.writeLong(rid);
        dest.writeLong(gid);
        dest.writeString(image);
        dest.writeString(ename);
        dest.writeString(pinyin);
        dest.writeString(abbr);
        dest.writeString(alpha);
        dest.writeLong(hot);
    }
    //Parcelable END

    //JsonSerializable
    public static Category fromJson(JSONObject jsonObject) throws JSONException {
        Category domain = new Category();

        domain.id = jsonObject.getLong("id");
        domain.pid = jsonObject.getLong("PID");
        domain.child = jsonObject.getLong("CHILD");
        domain.name = jsonObject.getString("NAME");
        domain.path = jsonObject.getString("PATH");
        domain.clazz = jsonObject.getString("CLAZZ");
        domain.rid = jsonObject.getLong("RID");
        domain.gid = jsonObject.getLong("GID");
        domain.image = jsonObject.getString("IMAGE");
        domain.ename = jsonObject.getString("ENAME");
        domain.pinyin = jsonObject.getString("PINYIN");
        domain.abbr = jsonObject.getString("ABBR");
        domain.alpha = jsonObject.getString("ALPHA");
        domain.hot = jsonObject.getLong("HOT");

        return domain;
    }

    public static String toJson(Category obj) throws JSONException {
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("id",obj.id);
        jsonObject.put("PID",obj.pid);
        jsonObject.put("CHILD",obj.child);
        jsonObject.put("NAME",obj.name);
        jsonObject.put("PATH",obj.path);
        jsonObject.put("CLAZZ",obj.clazz);
        jsonObject.put("RID",obj.rid);
        jsonObject.put("GID",obj.gid);
        jsonObject.put("IMAGE",obj.image);
        jsonObject.put("ENAME",obj.ename);
        jsonObject.put("PINYIN",obj.pinyin);
        jsonObject.put("ABBR",obj.abbr);
        jsonObject.put("ALPHA",obj.alpha);
        jsonObject.put("HOT",obj.hot);
        return jsonObject.toString();
    }
    //JsonSerializable END

}
