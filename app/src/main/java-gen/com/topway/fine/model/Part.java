package com.topway.fine.model;

import com.topway.fine.model.DaoSession;
import de.greenrobot.dao.DaoException;
import com.topway.fine.db.DatabaseHelper;

import android.os.Parcel;
import android.os.Parcelable;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "Parts".
 */
public class Part implements Parcelable {

    private Long id;
    private Long categoryId;
    private Long brandId;
    private Long serieId;
    private Long engineId;
    private String name;
    private String number;
    private String unit;
    private String image;
    private Long hot;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PartDao myDao;

    private Category category;
    private Long category__resolvedKey;

    private Brand brand;
    private Long brand__resolvedKey;

    private Serie serie;
    private Long serie__resolvedKey;

    private Engine engine;
    private Long engine__resolvedKey;


    public Part() {
    }

    public Part(Long id) {
        this.id = id;
    }

    public Part(Long id, Long categoryId, Long brandId, Long serieId, Long engineId, String name, String number, String unit, String image, Long hot) {
        this.id = id;
        this.categoryId = categoryId;
        this.brandId = brandId;
        this.serieId = serieId;
        this.engineId = engineId;
        this.name = name;
        this.number = number;
        this.unit = unit;
        this.image = image;
        this.hot = hot;
    }

    public void setDefaultValue() {
        if (this.id == null )
           this.id = new Long(0);
        if (this.categoryId == null )
           this.categoryId = new Long(0);
        if (this.brandId == null )
           this.brandId = new Long(0);
        if (this.serieId == null )
           this.serieId = new Long(0);
        if (this.engineId == null )
           this.engineId = new Long(0);
        if (this.name == null )
           this.name = "";
        if (this.number == null )
           this.number = "";
        if (this.unit == null )
           this.unit = "";
        if (this.image == null )
           this.image = "";
        if (this.hot == null )
           this.hot = new Long(0);
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPartDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(Long categoryId) {
        this.categoryId = categoryId;
    }

    public Long getBrandId() {
        return brandId;
    }

    public void setBrandId(Long brandId) {
        this.brandId = brandId;
    }

    public Long getSerieId() {
        return serieId;
    }

    public void setSerieId(Long serieId) {
        this.serieId = serieId;
    }

    public Long getEngineId() {
        return engineId;
    }

    public void setEngineId(Long engineId) {
        this.engineId = engineId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getNumber() {
        return number;
    }

    public void setNumber(String number) {
        this.number = number;
    }

    public String getUnit() {
        return unit;
    }

    public void setUnit(String unit) {
        this.unit = unit;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public Long getHot() {
        return hot;
    }

    public void setHot(Long hot) {
        this.hot = hot;
    }

    /** To-one relationship, resolved on first access. */
    public Category getCategory() {
        Long __key = this.categoryId;
        if (category__resolvedKey == null || !category__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                daoSession = DatabaseHelper.instance().getSession();
                //throw new DaoException("Entity is detached from DAO context");
            }
            CategoryDao targetDao = daoSession.getCategoryDao();
            Category categoryNew = targetDao.load(__key);
            synchronized (this) {
                category = categoryNew;
            	category__resolvedKey = __key;
            }
        }
        return category;
    }

    public void setCategory(Category category) {
        synchronized (this) {
            this.category = category;
            categoryId = category == null ? null : category.getId();
            category__resolvedKey = categoryId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Brand getBrand() {
        Long __key = this.brandId;
        if (brand__resolvedKey == null || !brand__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                daoSession = DatabaseHelper.instance().getSession();
                //throw new DaoException("Entity is detached from DAO context");
            }
            BrandDao targetDao = daoSession.getBrandDao();
            Brand brandNew = targetDao.load(__key);
            synchronized (this) {
                brand = brandNew;
            	brand__resolvedKey = __key;
            }
        }
        return brand;
    }

    public void setBrand(Brand brand) {
        synchronized (this) {
            this.brand = brand;
            brandId = brand == null ? null : brand.getId();
            brand__resolvedKey = brandId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Serie getSerie() {
        Long __key = this.serieId;
        if (serie__resolvedKey == null || !serie__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                daoSession = DatabaseHelper.instance().getSession();
                //throw new DaoException("Entity is detached from DAO context");
            }
            SerieDao targetDao = daoSession.getSerieDao();
            Serie serieNew = targetDao.load(__key);
            synchronized (this) {
                serie = serieNew;
            	serie__resolvedKey = __key;
            }
        }
        return serie;
    }

    public void setSerie(Serie serie) {
        synchronized (this) {
            this.serie = serie;
            serieId = serie == null ? null : serie.getId();
            serie__resolvedKey = serieId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Engine getEngine() {
        Long __key = this.engineId;
        if (engine__resolvedKey == null || !engine__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                daoSession = DatabaseHelper.instance().getSession();
                //throw new DaoException("Entity is detached from DAO context");
            }
            EngineDao targetDao = daoSession.getEngineDao();
            Engine engineNew = targetDao.load(__key);
            synchronized (this) {
                engine = engineNew;
            	engine__resolvedKey = __key;
            }
        }
        return engine;
    }

    public void setEngine(Engine engine) {
        synchronized (this) {
            this.engine = engine;
            engineId = engine == null ? null : engine.getId();
            engine__resolvedKey = engineId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }


    //Parcelable
    protected Part (Parcel in) {
        id = in.readLong();
        categoryId = in.readLong();
        brandId = in.readLong();
        serieId = in.readLong();
        engineId = in.readLong();
        name = in.readString();
        number = in.readString();
        unit = in.readString();
        image = in.readString();
        hot = in.readLong();
    }

    public static final Creator<Part> CREATOR = new Creator<Part>() {
        @Override
        public Part createFromParcel(Parcel in) {
            return new Part(in);
        }

        @Override
        public Part[] newArray(int size) {
            return new Part[size];
        }
    };

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeLong(id);
        dest.writeLong(categoryId);
        dest.writeLong(brandId);
        dest.writeLong(serieId);
        dest.writeLong(engineId);
        dest.writeString(name);
        dest.writeString(number);
        dest.writeString(unit);
        dest.writeString(image);
        dest.writeLong(hot);
    }
    //Parcelable END

    //JsonSerializable
    public static Part fromJson(JSONObject jsonObject) throws JSONException {
        Part domain = new Part();

        domain.id = jsonObject.getLong("id");
        domain.categoryId = jsonObject.getLong("CATEGORY_ID");
        domain.brandId = jsonObject.getLong("BRAND_ID");
        domain.serieId = jsonObject.getLong("SERIE_ID");
        domain.engineId = jsonObject.getLong("ENGINE_ID");
        domain.name = jsonObject.getString("NAME");
        domain.number = jsonObject.getString("NUMBER");
        domain.unit = jsonObject.getString("UNIT");
        domain.image = jsonObject.getString("IMAGE");
        domain.hot = jsonObject.getLong("HOT");

        return domain;
    }

    public static String toJson(Part obj) throws JSONException {
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("id",obj.id);
        jsonObject.put("CATEGORY_ID",obj.categoryId);
        jsonObject.put("BRAND_ID",obj.brandId);
        jsonObject.put("SERIE_ID",obj.serieId);
        jsonObject.put("ENGINE_ID",obj.engineId);
        jsonObject.put("NAME",obj.name);
        jsonObject.put("NUMBER",obj.number);
        jsonObject.put("UNIT",obj.unit);
        jsonObject.put("IMAGE",obj.image);
        jsonObject.put("HOT",obj.hot);
        return jsonObject.toString();
    }
    //JsonSerializable END

}
