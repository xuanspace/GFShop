package com.topway.fine.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.topway.fine.model.Engine;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Engines".
*/
public class EngineDao extends AbstractDao<Engine, Long> {

    public static final String TABLENAME = "Engines";

    /**
     * Properties of entity Engine.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Apply = new Property(2, String.class, "apply", false, "APPLY");
        public final static Property GenericId = new Property(3, Long.class, "genericId", false, "GENERIC_ID");
        public final static Property BrandId = new Property(4, Long.class, "brandId", false, "BRAND_ID");
        public final static Property BrandName = new Property(5, String.class, "brandName", false, "BRAND_NAME");
        public final static Property Path = new Property(6, String.class, "path", false, "PATH");
        public final static Property Image = new Property(7, String.class, "image", false, "IMAGE");
        public final static Property Common = new Property(8, Long.class, "common", false, "COMMON");
        public final static Property Hot = new Property(9, Long.class, "hot", false, "HOT");
    };

    private DaoSession daoSession;


    public EngineDao(DaoConfig config) {
        super(config);
    }
    
    public EngineDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Engines\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT DEFAULT('') ," + // 1: name
                "\"APPLY\" TEXT DEFAULT('') ," + // 2: apply
                "\"GENERIC_ID\" INTEGER DEFAULT(0) ," + // 3: genericId
                "\"BRAND_ID\" INTEGER DEFAULT(0) ," + // 4: brandId
                "\"BRAND_NAME\" TEXT DEFAULT('') ," + // 5: brandName
                "\"PATH\" TEXT DEFAULT('') ," + // 6: path
                "\"IMAGE\" TEXT DEFAULT('') ," + // 7: image
                "\"COMMON\" INTEGER DEFAULT(0) ," + // 8: common
                "\"HOT\" INTEGER DEFAULT(0) );"); // 9: hot
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Engines\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Engine entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String apply = entity.getApply();
        if (apply != null) {
            stmt.bindString(3, apply);
        }
 
        Long genericId = entity.getGenericId();
        if (genericId != null) {
            stmt.bindLong(4, genericId);
        }
 
        Long brandId = entity.getBrandId();
        if (brandId != null) {
            stmt.bindLong(5, brandId);
        }
 
        String brandName = entity.getBrandName();
        if (brandName != null) {
            stmt.bindString(6, brandName);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(7, path);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(8, image);
        }
 
        Long common = entity.getCommon();
        if (common != null) {
            stmt.bindLong(9, common);
        }
 
        Long hot = entity.getHot();
        if (hot != null) {
            stmt.bindLong(10, hot);
        }
    }

    @Override
    protected void attachEntity(Engine entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Engine readEntity(Cursor cursor, int offset) {
        Engine entity = new Engine( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // apply
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // genericId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // brandId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // brandName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // path
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // image
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // common
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // hot
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Engine entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setApply(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGenericId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setBrandId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setBrandName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setImage(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCommon(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setHot(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Engine entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Engine entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getGenericDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getBrandDao().getAllColumns());
            builder.append(" FROM Engines T");
            builder.append(" LEFT JOIN Generics T0 ON T.\"GENERIC_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN Brands T1 ON T.\"BRAND_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Engine loadCurrentDeep(Cursor cursor, boolean lock) {
        Engine entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Generic generic = loadCurrentOther(daoSession.getGenericDao(), cursor, offset);
        entity.setGeneric(generic);
        offset += daoSession.getGenericDao().getAllColumns().length;

        Brand brand = loadCurrentOther(daoSession.getBrandDao(), cursor, offset);
        entity.setBrand(brand);

        return entity;    
    }

    public Engine loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Engine> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Engine> list = new ArrayList<Engine>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Engine> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Engine> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
