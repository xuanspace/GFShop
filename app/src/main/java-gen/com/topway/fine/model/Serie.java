package com.topway.fine.model;

import com.topway.fine.model.DaoSession;
import de.greenrobot.dao.DaoException;
import com.topway.fine.db.DatabaseHelper;

import android.os.Parcel;
import android.os.Parcelable;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "Series".
 */
public class Serie implements Parcelable {

    private Long id;
    private String name;
    private Long genericId;
    private Long brandId;
    private String brandName;
    private Long engineId;
    private String engineName;
    private String path;
    private String image;
    private Long common;
    private Long hot;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SerieDao myDao;

    private Generic generic;
    private Long generic__resolvedKey;

    private Brand brand;
    private Long brand__resolvedKey;

    private Engine engine;
    private Long engine__resolvedKey;


    public Serie() {
    }

    public Serie(Long id) {
        this.id = id;
    }

    public Serie(Long id, String name, Long genericId, Long brandId, String brandName, Long engineId, String engineName, String path, String image, Long common, Long hot) {
        this.id = id;
        this.name = name;
        this.genericId = genericId;
        this.brandId = brandId;
        this.brandName = brandName;
        this.engineId = engineId;
        this.engineName = engineName;
        this.path = path;
        this.image = image;
        this.common = common;
        this.hot = hot;
    }

    public void setDefaultValue() {
        if (this.id == null )
           this.id = new Long(0);
        if (this.name == null )
           this.name = "";
        if (this.genericId == null )
           this.genericId = new Long(0);
        if (this.brandId == null )
           this.brandId = new Long(0);
        if (this.brandName == null )
           this.brandName = "";
        if (this.engineId == null )
           this.engineId = new Long(0);
        if (this.engineName == null )
           this.engineName = "";
        if (this.path == null )
           this.path = "";
        if (this.image == null )
           this.image = "";
        if (this.common == null )
           this.common = new Long(0);
        if (this.hot == null )
           this.hot = new Long(0);
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSerieDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Long getGenericId() {
        return genericId;
    }

    public void setGenericId(Long genericId) {
        this.genericId = genericId;
    }

    public Long getBrandId() {
        return brandId;
    }

    public void setBrandId(Long brandId) {
        this.brandId = brandId;
    }

    public String getBrandName() {
        return brandName;
    }

    public void setBrandName(String brandName) {
        this.brandName = brandName;
    }

    public Long getEngineId() {
        return engineId;
    }

    public void setEngineId(Long engineId) {
        this.engineId = engineId;
    }

    public String getEngineName() {
        return engineName;
    }

    public void setEngineName(String engineName) {
        this.engineName = engineName;
    }

    public String getPath() {
        return path;
    }

    public void setPath(String path) {
        this.path = path;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public Long getCommon() {
        return common;
    }

    public void setCommon(Long common) {
        this.common = common;
    }

    public Long getHot() {
        return hot;
    }

    public void setHot(Long hot) {
        this.hot = hot;
    }

    /** To-one relationship, resolved on first access. */
    public Generic getGeneric() {
        Long __key = this.genericId;
        if (generic__resolvedKey == null || !generic__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                daoSession = DatabaseHelper.instance().getSession();
                //throw new DaoException("Entity is detached from DAO context");
            }
            GenericDao targetDao = daoSession.getGenericDao();
            Generic genericNew = targetDao.load(__key);
            synchronized (this) {
                generic = genericNew;
            	generic__resolvedKey = __key;
            }
        }
        return generic;
    }

    public void setGeneric(Generic generic) {
        synchronized (this) {
            this.generic = generic;
            genericId = generic == null ? null : generic.getId();
            generic__resolvedKey = genericId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Brand getBrand() {
        Long __key = this.brandId;
        if (brand__resolvedKey == null || !brand__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                daoSession = DatabaseHelper.instance().getSession();
                //throw new DaoException("Entity is detached from DAO context");
            }
            BrandDao targetDao = daoSession.getBrandDao();
            Brand brandNew = targetDao.load(__key);
            synchronized (this) {
                brand = brandNew;
            	brand__resolvedKey = __key;
            }
        }
        return brand;
    }

    public void setBrand(Brand brand) {
        synchronized (this) {
            this.brand = brand;
            brandId = brand == null ? null : brand.getId();
            brand__resolvedKey = brandId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Engine getEngine() {
        Long __key = this.engineId;
        if (engine__resolvedKey == null || !engine__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                daoSession = DatabaseHelper.instance().getSession();
                //throw new DaoException("Entity is detached from DAO context");
            }
            EngineDao targetDao = daoSession.getEngineDao();
            Engine engineNew = targetDao.load(__key);
            synchronized (this) {
                engine = engineNew;
            	engine__resolvedKey = __key;
            }
        }
        return engine;
    }

    public void setEngine(Engine engine) {
        synchronized (this) {
            this.engine = engine;
            engineId = engine == null ? null : engine.getId();
            engine__resolvedKey = engineId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }


    //Parcelable
    protected Serie (Parcel in) {
        id = in.readLong();
        name = in.readString();
        genericId = in.readLong();
        brandId = in.readLong();
        brandName = in.readString();
        engineId = in.readLong();
        engineName = in.readString();
        path = in.readString();
        image = in.readString();
        common = in.readLong();
        hot = in.readLong();
    }

    public static final Creator<Serie> CREATOR = new Creator<Serie>() {
        @Override
        public Serie createFromParcel(Parcel in) {
            return new Serie(in);
        }

        @Override
        public Serie[] newArray(int size) {
            return new Serie[size];
        }
    };

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeLong(id);
        dest.writeString(name);
        dest.writeLong(genericId);
        dest.writeLong(brandId);
        dest.writeString(brandName);
        dest.writeLong(engineId);
        dest.writeString(engineName);
        dest.writeString(path);
        dest.writeString(image);
        dest.writeLong(common);
        dest.writeLong(hot);
    }
    //Parcelable END

    //JsonSerializable
    public static Serie fromJson(JSONObject jsonObject) throws JSONException {
        Serie domain = new Serie();

        domain.id = jsonObject.getLong("id");
        domain.name = jsonObject.getString("NAME");
        domain.genericId = jsonObject.getLong("GENERIC_ID");
        domain.brandId = jsonObject.getLong("BRAND_ID");
        domain.brandName = jsonObject.getString("BRAND_NAME");
        domain.engineId = jsonObject.getLong("ENGINE_ID");
        domain.engineName = jsonObject.getString("ENGINE_NAME");
        domain.path = jsonObject.getString("PATH");
        domain.image = jsonObject.getString("IMAGE");
        domain.common = jsonObject.getLong("COMMON");
        domain.hot = jsonObject.getLong("HOT");

        return domain;
    }

    public static String toJson(Serie obj) throws JSONException {
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("id",obj.id);
        jsonObject.put("NAME",obj.name);
        jsonObject.put("GENERIC_ID",obj.genericId);
        jsonObject.put("BRAND_ID",obj.brandId);
        jsonObject.put("BRAND_NAME",obj.brandName);
        jsonObject.put("ENGINE_ID",obj.engineId);
        jsonObject.put("ENGINE_NAME",obj.engineName);
        jsonObject.put("PATH",obj.path);
        jsonObject.put("IMAGE",obj.image);
        jsonObject.put("COMMON",obj.common);
        jsonObject.put("HOT",obj.hot);
        return jsonObject.toString();
    }
    //JsonSerializable END

}
