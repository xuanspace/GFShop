package com.topway.fine.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.topway.fine.model.Company;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Companys".
*/
public class CompanyDao extends AbstractDao<Company, Long> {

    public static final String TABLENAME = "Companys";

    /**
     * Properties of entity Company.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Shortname = new Property(2, String.class, "shortname", false, "SHORTNAME");
        public final static Property Alpha = new Property(3, String.class, "alpha", false, "ALPHA");
        public final static Property Pinyin = new Property(4, String.class, "pinyin", false, "PINYIN");
        public final static Property Abbr = new Property(5, String.class, "abbr", false, "ABBR");
        public final static Property Address = new Property(6, String.class, "address", false, "ADDRESS");
        public final static Property Telephone = new Property(7, String.class, "telephone", false, "TELEPHONE");
        public final static Property Mobile = new Property(8, String.class, "mobile", false, "MOBILE");
        public final static Property Fax = new Property(9, String.class, "fax", false, "FAX");
        public final static Property Email = new Property(10, String.class, "email", false, "EMAIL");
        public final static Property Qq = new Property(11, String.class, "qq", false, "QQ");
        public final static Property Man = new Property(12, String.class, "man", false, "MAN");
        public final static Property Memo = new Property(13, String.class, "memo", false, "MEMO");
        public final static Property Image = new Property(14, String.class, "image", false, "IMAGE");
        public final static Property Hot = new Property(15, Long.class, "hot", false, "HOT");
    };


    public CompanyDao(DaoConfig config) {
        super(config);
    }
    
    public CompanyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Companys\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT DEFAULT('') ," + // 1: name
                "\"SHORTNAME\" TEXT DEFAULT('') ," + // 2: shortname
                "\"ALPHA\" TEXT DEFAULT('') ," + // 3: alpha
                "\"PINYIN\" TEXT DEFAULT('') ," + // 4: pinyin
                "\"ABBR\" TEXT DEFAULT('') ," + // 5: abbr
                "\"ADDRESS\" TEXT DEFAULT('') ," + // 6: address
                "\"TELEPHONE\" TEXT DEFAULT('') ," + // 7: telephone
                "\"MOBILE\" TEXT DEFAULT('') ," + // 8: mobile
                "\"FAX\" TEXT DEFAULT('') ," + // 9: fax
                "\"EMAIL\" TEXT DEFAULT('') ," + // 10: email
                "\"QQ\" TEXT DEFAULT('') ," + // 11: qq
                "\"MAN\" TEXT DEFAULT('') ," + // 12: man
                "\"MEMO\" TEXT DEFAULT('') ," + // 13: memo
                "\"IMAGE\" TEXT DEFAULT('') ," + // 14: image
                "\"HOT\" INTEGER DEFAULT(0) );"); // 15: hot
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Companys\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Company entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String shortname = entity.getShortname();
        if (shortname != null) {
            stmt.bindString(3, shortname);
        }
 
        String alpha = entity.getAlpha();
        if (alpha != null) {
            stmt.bindString(4, alpha);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(5, pinyin);
        }
 
        String abbr = entity.getAbbr();
        if (abbr != null) {
            stmt.bindString(6, abbr);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(8, telephone);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(9, mobile);
        }
 
        String fax = entity.getFax();
        if (fax != null) {
            stmt.bindString(10, fax);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(11, email);
        }
 
        String qq = entity.getQq();
        if (qq != null) {
            stmt.bindString(12, qq);
        }
 
        String man = entity.getMan();
        if (man != null) {
            stmt.bindString(13, man);
        }
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(14, memo);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(15, image);
        }
 
        Long hot = entity.getHot();
        if (hot != null) {
            stmt.bindLong(16, hot);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Company readEntity(Cursor cursor, int offset) {
        Company entity = new Company( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // shortname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // alpha
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pinyin
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // abbr
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // address
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // telephone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // mobile
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // fax
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // email
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // qq
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // man
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // memo
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // image
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15) // hot
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Company entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setShortname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAlpha(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPinyin(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAbbr(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTelephone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMobile(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFax(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEmail(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setQq(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMan(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setMemo(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setImage(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setHot(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Company entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Company entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
