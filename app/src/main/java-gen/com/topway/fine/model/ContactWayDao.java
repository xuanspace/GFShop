package com.topway.fine.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.topway.fine.model.ContactWay;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ContactWays".
*/
public class ContactWayDao extends AbstractDao<ContactWay, Long> {

    public static final String TABLENAME = "ContactWays";

    /**
     * Properties of entity ContactWay.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TableId = new Property(1, Long.class, "tableId", false, "TABLE_ID");
        public final static Property PrimaryId = new Property(2, Long.class, "primaryId", false, "PRIMARY_ID");
        public final static Property Way = new Property(3, Long.class, "way", false, "WAY");
        public final static Property Number = new Property(4, String.class, "number", false, "NUMBER");
    };


    public ContactWayDao(DaoConfig config) {
        super(config);
    }
    
    public ContactWayDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ContactWays\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TABLE_ID\" INTEGER DEFAULT(0) ," + // 1: tableId
                "\"PRIMARY_ID\" INTEGER DEFAULT(0) ," + // 2: primaryId
                "\"WAY\" INTEGER DEFAULT(0) ," + // 3: way
                "\"NUMBER\" TEXT DEFAULT('') );"); // 4: number
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ContactWays\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ContactWay entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long tableId = entity.getTableId();
        if (tableId != null) {
            stmt.bindLong(2, tableId);
        }
 
        Long primaryId = entity.getPrimaryId();
        if (primaryId != null) {
            stmt.bindLong(3, primaryId);
        }
 
        Long way = entity.getWay();
        if (way != null) {
            stmt.bindLong(4, way);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(5, number);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ContactWay readEntity(Cursor cursor, int offset) {
        ContactWay entity = new ContactWay( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // tableId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // primaryId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // way
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // number
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ContactWay entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTableId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setPrimaryId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setWay(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ContactWay entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ContactWay entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
